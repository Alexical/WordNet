See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  9/35 tests passed
Memory:       4/4 tests passed
Timing:       28/27 tests passed

Aggregate score: 56.17%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.7K Dec 18 04:13 BFIterator.java
1.7K Dec 18 04:13 BFSIterator.java
 910 Dec 18 04:13 Outcast.java
3.1K Dec 18 04:13 SAP.java
1.1K Dec 18 04:13 WordNet.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac SAP.java
*-----------------------------------------------------------

% javac WordNet.java
*-----------------------------------------------------------

% javac Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
SAP.java:10: The private instance (or static) variable 'G' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------
[INFO] WordNet.java:1: The program uses neither 'DirectedCycle' nor 'Topological' to check whether the digraph is a DAG. [Design]

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 19 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
    - failed on trial 2 of 225
    - v = 10, w = 7
    - student   length() = 4
    - reference length() = 3

  * digraph4.txt
    - failed on trial 31 of 100
    - v = 1, w = 4
    - student   length() = 5
    - reference length() = 3

  * digraph5.txt
    - failed on trial 8 of 484
    - v = 17, w = 21
    - student   length() = 7
    - reference length() = 5

  * digraph6.txt
    - failed on trial 25 of 64
    - v = 5, w = 1
    - student   length() = 5
    - reference length() = 4

  * digraph9.txt
    - failed on trial 1 of 81
    - v = 0, w = 4
    - student   length() = 4
    - reference length() = 3

==> FAILED

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
    - failed on trial 28 of 100
    - v = 24396, w = 61116
    - student   length() = 16
    - reference length() = 15

==> FAILED

Test 3: check length() and ancestor() on directed paths
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 4: check length() and ancestor() on directed cycles
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 5: check length() and ancestor() on complete graphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 6: check length() and ancestor() on tournament digraphs
  * 5
    - failed on trial 8 of 25
    - v = 0, w = 2
    - student   length() = 2
    - reference length() = 1

  * 10
    - failed on trial 8 of 100
    - v = 2, w = 4
    - student   length() = 2
    - reference length() = 1

  * 20
    - failed on trial 2 of 400
    - v = 10, w = 11
    - student   length() = 2
    - reference length() = 1

  * 50
    - failed on trial 4 of 2500
    - v = 12, w = 35
    - student   length() = 2
    - reference length() = 1

==> FAILED

Test 7: check length() and ancestor() on complete binary trees
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
    - failed on trial 11 of 25
    - v = 4, w = 2
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 4 of 100
    - v = 9, w = 1
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 8 of 400
    - v = 19, w = 8
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
    - failed on trial 2 of 25
    - v = 0, w = 3
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 0, w = 7
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 6 of 400
    - v = 12, w = 0
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
    - failed on trial 9 of 25
    - v = 0, w = 1
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 6 of 100
    - v = 8, w = 0
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 4 of 400
    - v = 4, w = 18
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 4, w = 0
    - student   length() = 3
    - reference length() = 2

    - failed on trial 3 of 100

  * 10 vertices, 40 edges
    - failed on trial 9 of 100
    - v = 6, w = 9
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 4 of 400
    - v = 11, w = 5
    - student   length() = 4
    - reference length() = 3

    - failed on trial 1 of 100

==> FAILED

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
  * digraph3.txt and digraph4.txt
    - v = 7, w = 13
    - (digraph3.txt) student   length() = 7
    - (digraph3.txt) reference length() = 6

  * digraph5.txt and digraph6.txt
    - v = 7, w = 17
    - (digraph5.txt) student   length() = 7
    - (digraph5.txt) reference length() = 5

  * digraph2.txt and digraph1.txt
==> FAILED

Test 15: check whether SAP is immutable
  * digraph1.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 3
    - student length before = 2
    - student length after  = 1

  * digraph2.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 4
    - student length after  = 1

  * digraph3.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = -1
    - student length after  = 1

  * digraph4.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = 3
    - student length after  = 1

  * digraph5.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = -1
    - student length after  = 1

  * digraph6.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 2
    - student length after  = 1

  * digraph-ambiguous-ancestor.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 2
    - student length after  = 1

==> FAILED

Test 16: check invalid arguments to length() and ancestor() in digraph1.txt
  * v = -1, w = 0
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    SAP.length(SAP.java:21)
    TestSAP.checkOutOfBounds(TestSAP.java:797)
    TestSAP.test16(TestSAP.java:851)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    SAP.ancestor(SAP.java:28)
    TestSAP.checkOutOfBounds(TestSAP.java:806)
    TestSAP.test16(TestSAP.java:851)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 0, w = -1
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    SAP.length(SAP.java:21)
    TestSAP.checkOutOfBounds(TestSAP.java:797)
    TestSAP.test16(TestSAP.java:852)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    SAP.ancestor(SAP.java:28)
    TestSAP.checkOutOfBounds(TestSAP.java:806)
    TestSAP.test16(TestSAP.java:852)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 13, w = 0
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    SAP.length(SAP.java:21)
    TestSAP.checkOutOfBounds(TestSAP.java:797)
    TestSAP.test16(TestSAP.java:853)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    SAP.ancestor(SAP.java:28)
    TestSAP.checkOutOfBounds(TestSAP.java:806)
    TestSAP.test16(TestSAP.java:853)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 0, w = 13
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    SAP.length(SAP.java:21)
    TestSAP.checkOutOfBounds(TestSAP.java:797)
    TestSAP.test16(TestSAP.java:854)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    SAP.ancestor(SAP.java:28)
    TestSAP.checkOutOfBounds(TestSAP.java:806)
    TestSAP.test16(TestSAP.java:854)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = -1 0 1 2 3 5 6 8 , w = 4 9 11 
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    TestSAP.checkOutOfBounds(TestSAP.java:822)
    TestSAP.test16(TestSAP.java:870)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    TestSAP.checkOutOfBounds(TestSAP.java:831)
    TestSAP.test16(TestSAP.java:870)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 0 1 2 3 5 6 8 , w = -1 4 9 11 
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    TestSAP.checkOutOfBounds(TestSAP.java:822)
    TestSAP.test16(TestSAP.java:872)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: -1

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    TestSAP.checkOutOfBounds(TestSAP.java:831)
    TestSAP.test16(TestSAP.java:872)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 13 0 1 2 3 5 6 8 , w = 4 9 11 
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    TestSAP.checkOutOfBounds(TestSAP.java:822)
    TestSAP.test16(TestSAP.java:874)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    TestSAP.checkOutOfBounds(TestSAP.java:831)
    TestSAP.test16(TestSAP.java:874)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 0 1 2 3 5 6 8 , w = 13 4 9 11 
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.length(SAP.java:41)
    TestSAP.checkOutOfBounds(TestSAP.java:822)
    TestSAP.test16(TestSAP.java:876)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    java.lang.ArrayIndexOutOfBoundsException: 13

    edu.princeton.cs.algs4.Digraph.adj(Digraph.java:179)
    BFIterator.next(BFIterator.java:49)
    SAP.ancestor(SAP.java:70)
    SAP.ancestor(SAP.java:58)
    TestSAP.checkOutOfBounds(TestSAP.java:831)
    TestSAP.test16(TestSAP.java:876)
    TestSAP.main(TestSAP.java:1255)

    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
==> FAILED

Test 17: check length() and ancestor() with Iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
    - failed on trial 13 of 100
    - v = 65600 
    - w = 12100 
    - student   length() = 9
    - reference length() = 8

  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
    - failed on trial 27 of 100
    - v = 81552 
    - w = 22741 51515 
    - student   length() = 15
    - reference length() = 13

  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
    - failed on trial 2 of 100
    - v = 64366 71968 
    - w = 24091 
    - student   length() = 13
    - reference length() = 12

  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
    - failed on trial 10 of 100
    - v = 1095 37033 
    - w = 31584 81512 
    - student   length() = 12
    - reference length() = 11

  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
    - failed on trial 7 of 100
    - v = 27051 29090 51193 
    - w size = 11
    - student   length() = 11
    - reference length() = 10

  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v size = 11
    - w = 353 58063 69405 
    - student   length() = 7
    - reference length() = 6

  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> FAILED

Test 18: Check Iterable version of length() and ancestor() with null arguments
==> passed

Test 19: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - ancestor() is not ancestor on shortest ancestral path
    - failed on call 21 to ancestor()
    - v = 3, w = 5
    - student   ancestor = 15
    - distance from 3 to 15 = 1
    - distance from 5 to 15 = 2
    - reference ancestor = 3
    - reference length   = 2

  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - ancestor() is not ancestor on shortest ancestral path
    - failed on call 4 to ancestor()
    - v = 6, w = 4
    - student   ancestor = 2
    - distance from 6 to 2 = 1
    - distance from 4 to 2 = 1
    - reference ancestor = 6
    - reference length   = 1

==> FAILED


Total: 7/19 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on pair 1 of 1000
    - nounA = debater
    - nounB = half-intensity
    - student   distance() = 0
    - reference distance() = 11

==> FAILED

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = 0
    - reference distance() = 1

==> FAILED

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = whacker
    - nounB = lactalbumin
    - student   distance() = 0
    - reference distance() = 11

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = salad_oil
    - nounB = haemoprotein
    - student   distance() = 0
    - reference distance() = 8

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = epithelial_tissue
    - nounB = immune_gamma_globulin
    - student   distance() = 0
    - reference distance() = 11

==> FAILED

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed considering pair 1 of 1000
    - nounA = scientist
    - nounB = tall_buttercup
    - reference distance() = 7
    - reference sap()      = 'organism being'

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:223)
    TestWordNet.test4(TestWordNet.java:298)
    TestWordNet.main(TestWordNet.java:826)

==> FAILED

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:304)
    TestWordNet.main(TestWordNet.java:829)

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:305)
    TestWordNet.main(TestWordNet.java:829)

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:306)
    TestWordNet.main(TestWordNet.java:829)

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:307)
    TestWordNet.main(TestWordNet.java:829)

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:308)
    TestWordNet.main(TestWordNet.java:829)

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:309)
    TestWordNet.main(TestWordNet.java:829)

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:310)
    TestWordNet.main(TestWordNet.java:829)

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - failed on pair 1
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:270)
    TestWordNet.test5(TestWordNet.java:311)
    TestWordNet.main(TestWordNet.java:829)

==> FAILED

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - failed considering pair 1 of 1000
    - nounA = lactalbumin
    - nounB = ricin_toxin
    - reference distance() = 2
    - reference sap()      = 'albumin albumen'

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:223)
    TestWordNet.test6(TestWordNet.java:318)
    TestWordNet.main(TestWordNet.java:832)

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - failed considering pair 1 of 1000
    - nounA = mineral_oil
    - nounB = prostate_specific_antigen
    - reference distance() = 5
    - reference sap()      = 'macromolecule supermolecule'

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:223)
    TestWordNet.test6(TestWordNet.java:319)
    TestWordNet.main(TestWordNet.java:832)

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed considering pair 1 of 1000
    - nounA = fibrous_tissue
    - nounB = mandibular_bone
    - reference distance() = 5
    - reference sap()      = 'animal_tissue'

    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:223)
    TestWordNet.test6(TestWordNet.java:320)
    TestWordNet.main(TestWordNet.java:832)

==> FAILED

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets3.txt, hypernyms3InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on trial 1
    - noun               = anamorphosis
    - student   isNoun() = false
    - reference isNoun() = true

  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - failed on trial 1
    - noun               = a
    - student   isNoun() = false
    - reference isNoun() = true

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - failed on trial 1
    - noun               = a
    - student   isNoun() = false
    - reference isNoun() = true

==> FAILED

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 119188
    - 119188 missing entries in student solution, including: 'zymurgy'
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: 'o'
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 8
    - 8 missing entries in student solution, including: 'h'
==> FAILED

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
    - noun               = a
    - student1   isNoun() = false
    - reference1 isNoun() = true

  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
    - noun               = anamorphosis
    - student1   isNoun() = false
    - reference1 isNoun() = true

==> FAILED

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
    - distance("x", "b") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "b") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
    - distance("b", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("b", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
    - distance("x", "a") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "a") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
    - distance("x", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
==> FAILED

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
==> passed

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
    - failed on call 1 to distance()
    - nounA = procaine
    - nounB = controlled_substance
    - student   distance() = 0
    - reference distance() = 4

  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
    - failed on call 1 to isNoun()
    - word               = Norwegian
    - student   isNoun() = false
    - reference isNoun() = true

  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.random(TestWordNet.java:758)
    TestWordNet.test14(TestWordNet.java:779)
    TestWordNet.main(TestWordNet.java:856)

  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.random(TestWordNet.java:758)
    TestWordNet.test14(TestWordNet.java:780)
    TestWordNet.main(TestWordNet.java:856)

==> FAILED


Total: 2/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = null
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = null
    - reference outcast() = Mickey_Mouse

  * outcast4.txt
    - nouns = [probability, statistics, mathematics, physics]
    - student   outcast() = null
    - reference outcast() = probability

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = null
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = null
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = null
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = null
    - reference outcast() = bed

  * outcast8a.txt
    - nouns = [Banti's_disease, hyperadrenalism, German_measles, gargoylism, Q_fever, amebiosis, anthrax, playboy]
    - student   outcast() = null
    - reference outcast() = playboy

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = null
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast9a.txt
    - nouns = [hair, eyes, arm, mouth, nose, ear, cheek, brow, chin]
    - student   outcast() = null
    - reference outcast() = eyes

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = null
    - reference outcast() = albatross

  * outcast10a.txt
    - nouns = [blue, green, yellow, brown, black, white, orange, violet, red, serendipity]
    - student   outcast() = null
    - reference outcast() = serendipity

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = null
    - reference outcast() = potato

  * outcast12.txt
    - nouns = [Dylan, folk, Guthrie, idol, Minneapolis, music, musical, playing, public, recognition, review, thunderbird]
    - student   outcast() = null
    - reference outcast() = Minneapolis

  * outcast12a.txt
    - nouns = [competition, cup, event, fielding, football, level, practice, prestige, team, tournament, world, mongoose]
    - student   outcast() = null
    - reference outcast() = mongoose

  * outcast17.txt
    - nouns = [art, canvas, china, culture, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = null
    - reference outcast() = particularism

  * outcast20.txt
    - nouns = [art, Buddha, Buddhism, canvas, china, culture, India, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = null
    - reference outcast() = particularism

  * outcast29.txt
    - nouns = [acorn, application, assembly, award, basic, cad, code, computer, custom, depth, development, finish, hardware, instruction, language, machine, model, operation, processor, project, silicon, simulation, software, speed, support, team, technology, test, mosque]
    - student   outcast() = null
    - reference outcast() = acorn

==> FAILED

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = null
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = null
    - reference outcast() = Mickey_Mouse

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = null
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = null
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = null
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = null
    - reference outcast() = bed

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = null
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = null
    - reference outcast() = albatross

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = null
    - reference outcast() = potato

==> FAILED


Total: 0/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 8347880 bytes
reference   memory    = 10320552 bytes
ratio                 = 0.81
maximum allowed ratio = 2.50

Total: 1/1 tests passed!

================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 16 bytes
    - reference memory              = 1494080 bytes
    - student / reference ratio     = 0.0
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 16 bytes
    - reference memory              = 7296712 bytes
    - student / reference ratio     = 0.0
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 16 bytes
    - reference memory              = 16931776 bytes
    - student / reference ratio     = 0.0
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.00 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  565986.00
     -  student   solution calls per second:  204757.00
     -  reference / student ratio:                 2.76

=> passed      student <= 50000x reference
=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> BONUS       student <=   100x reference
=> BONUS       student <=    10x reference

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  175753.00
     -  student   solution calls per second:   82681.00
     -  reference / student ratio:                 2.13

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference
=> BONUS       student <=    10x reference

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   12854.00
     -  student   solution calls per second:    9738.00
     -  reference / student ratio:                 1.32

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference
=> BONUS       student <=     2x reference

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
          8192     0.05
         16384     0.13
         32768     0.21
         65536     0.30
==> passed


Total: 18/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
    - student   In construct calls = 0
    - reference In construct calls = 2
    - minimum required             = 2
    - maximum allowed              = 2

==> FAILED

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each
  * calls to constructor = 0
    - minimum required   = 1
    - maximum allowed    = 1

  * calls to length()    = 0
    - minimum required   = 3
    - maximum allowed    = 6

  * calls to ancestor()  = 0
    - minimum required   = 3
    - maximum allowed    = 6

==> FAILED

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 0
    - minimum required  = 1
    - maximum allowed   = 2

  * calls to addEdge()   = 0
    - the constructor should call addEdge() once per WordNet edge

  * calls to adj()       = 0
  * calls to outdegree() = 0
  * calls to indegree()  = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> FAILED

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * calls to constructor = 0
  * calls to addEdge()   = 0
  * calls to adj()       = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.00 seconds
    - maximum allowed     time = 10.00 seconds

==> passed

Test 6a-e: time sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  215463.00
    - student   solution calls per second:  658168.00
    - reference / student ratio:                 0.33

=> passed    student <= 10000x reference
=> passed    student <=  1000x reference
=> passed    student <=   100x reference
=> passed    student <=    10x reference
=> passed    student <=     5x reference
=> BONUS     student <=   0.5x reference

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  597822.00
    - student   solution calls per second:  649258.00
    - reference / student ratio:                 0.92
    - allowed ratio:                             4.00
==> passed

Total: 9/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: count calls to methods in WordNet
 * outcast4.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 6
    - maximum allowed             = 16

 * outcast10.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 45
    - maximum allowed             = 100

 * outcast29.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 406
    - maximum allowed             = 841

==> FAILED

Test 2: timing calls to outcast() for various outcast files

Total time must not exceed 1.0 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.00

Total elapsed time: 0.00 seconds

==> passed


Total: 1/2 tests passed!


================================================================